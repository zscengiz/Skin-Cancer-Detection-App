// lib/screens/reports/pdf.dart

import 'dart:io';
import 'package:pdf/pdf.dart';
import 'package:pdf/widgets.dart' as pw;
import 'package:path_provider/path_provider.dart';

Future<String> generatePdfReport({
  required File imageFile,
  required String label,
  required double confidence,
  required String risk,
  required String advice,
  required Map<String, String> fullNames,
}) async {
  final now = DateTime.now();
  final timestamp =
      "${now.year}${_twoDigits(now.month)}${_twoDigits(now.day)}_${_twoDigits(now.hour)}${_twoDigits(now.minute)}";

  final riskLevel = risk.toLowerCase().contains('high')
      ? 'High'
      : risk.toLowerCase().contains('medium')
          ? 'Medium'
          : 'Low';

  final fileName = "${timestamp}_${riskLevel}_$label.pdf";
  final dir = await getApplicationDocumentsDirectory();
  final reportsDir = Directory('${dir.path}/reports');
  final previewsDir = Directory('${dir.path}/previews');

  if (!await reportsDir.exists()) await reportsDir.create(recursive: true);
  if (!await previewsDir.exists()) await previewsDir.create(recursive: true);

  final filePath = "${reportsDir.path}/$fileName";
  final previewPath =
      "${previewsDir.path}/${fileName.replaceAll(".pdf", ".jpg")}";

  final imageBytes = await imageFile.readAsBytes();
  final image = pw.MemoryImage(imageBytes);

  final pdf = pw.Document();

  pdf.addPage(
    pw.Page(
      margin: const pw.EdgeInsets.all(32),
      build: (context) => pw.Container(
        decoration: pw.BoxDecoration(
          color: PdfColors.grey100,
          borderRadius: const pw.Radius.circular(10),
        ),
        child: pw.Column(
          crossAxisAlignment: pw.CrossAxisAlignment.start,
          children: [
            pw.Container(
              width: double.infinity,
              padding: const pw.EdgeInsets.all(14),
              decoration: pw.BoxDecoration(
                color: PdfColors.deepPurple,
                borderRadius: const pw.BorderRadius.vertical(
                  top: pw.Radius.circular(10),
                ),
              ),
              child: pw.Text(
                'Skin Lesion Report',
                style: pw.TextStyle(
                  fontSize: 22,
                  fontWeight: pw.FontWeight.bold,
                  color: PdfColors.white,
                ),
              ),
            ),
            pw.Padding(
              padding:
                  const pw.EdgeInsets.symmetric(horizontal: 16, vertical: 20),
              child: pw.Column(
                crossAxisAlignment: pw.CrossAxisAlignment.start,
                children: [
                  pw.Text('Date: ${now.toLocal()}'),
                  pw.SizedBox(height: 6),
                  pw.Text('Diagnosis: ${fullNames[label] ?? label}'),
                  pw.SizedBox(height: 6),
                  pw.Text('Confidence: ${confidence.toStringAsFixed(1)} %'),
                  pw.SizedBox(height: 6),
                  pw.Text('Risk Level: $risk'),
                  pw.SizedBox(height: 6),
                  pw.Text('Advice: $advice'),
                  pw.SizedBox(height: 24),
                  pw.Text(
                    'Uploaded Image:',
                    style: pw.TextStyle(fontWeight: pw.FontWeight.bold),
                  ),
                  pw.SizedBox(height: 10),
                  pw.Center(
                    child: pw.Image(image, width: 300, height: 300),
                  ),
                ],
              ),
            ),
            pw.Spacer(),
            pw.Divider(thickness: 0.8),
            pw.Center(
              child: pw.Text(
                'Generated by Skin Cancer Detection App',
                style: pw.TextStyle(fontSize: 10, color: PdfColors.grey600),
              ),
            ),
          ],
        ),
      ),
    ),
  );

  final file = File(filePath);
  await file.writeAsBytes(await pdf.save());

  final previewFile = File(previewPath);
  await previewFile.writeAsBytes(imageBytes);

  return filePath;
}

String _twoDigits(int n) => n.toString().padLeft(2, '0');
